
clear;

biData = dlmread('D:/KMPA/Assignments/Assign1/Assignment1-Data/2.Bivariate/group5/bivariateData/group5_train100.txt');
testData = dlmread('D:/KMPA/Assignments/Assign1/Assignment1-Data/2.Bivariate/group5/bivariateData/group5_test.txt');
dataSize = size(biData,1);
testDataSize = size(testData,1);

temp3 = [biData; testData];
b = dataSize + testDataSize;
randoms = randperm(b,b);

biData = temp3(randoms(1,1:dataSize),:);
testData = temp3(randoms(1,dataSize+1:testDataSize+dataSize),:);

dimensionX = size(biData,2) - 1;
 
XTrain = biData(1:dataSize,1);
YTrain = biData(1:dataSize,2);
input(:,1) = XTrain;
input(:,2) = YTrain;
ZTrain = biData(1:dataSize,3);

XTest = testData(:,1);
YTest = testData(:,2);
ZTest = testData(:,3);

minX = min(XTrain);
maxX = max(XTrain);
minY = min(YTrain);
maxY = max(YTrain);

[Xx,Yy] = meshgrid(minX:0.4:maxX,minY:0.4:maxY);

ZzTrain = griddata(XTrain,YTrain,ZTrain,Xx,Yy);

% figure
% mesh(Xx,Yy,Zz);
% hold on
% plot3(X,Y,Z,'o');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

maxGaussians = 590;
steps = 20;
start = 2;
errorTrainArr(:,1) = zeros;
errorTestArr(:,1) = zeros;
index=1;
params(:,1) = zeros;
designTrain(dataSize,:) = zeros;
designTest(testDataSize,:) = zeros;
centres = zeros;
centreDist(size(centres,1),size(centres,1)) = zeros;

% for D = start:steps:maxGaussians

    D = 90;
[labels,centres] = kmeans(biData,D);

%for finding the deviation of gaussian basis functions
for i=1:1:size(centres,1)

    for j=1:1:size(centres,1)
       
        centreDist(i,j) = norm(centres(i,:) - centres(j,:));
    end
end

%creates covariance matrix
deviation = max(centreDist(:)) / sqrt(2 * D);
temp1(1:dimensionX) = deviation * deviation;
covMatrix = diag(temp1);

%computes design matrix for training data
for i=1:1:dataSize
   
    for j=1:1:D
        
        temp1 = (biData(i,1:dimensionX) - centres(j,1:dimensionX));
        numerator = (temp1 / covMatrix) * temp1';
        designTrain(i,j) = exp(-1 * numerator / 2);
        temp1 = zeros;
    end
end

designInvTrain = pinv(designTrain);
params = designInvTrain * ZTrain;
modelOutput(1:dataSize,1) = designTrain * params;%finds the model output
temp4 = (modelOutput - ZTrain)' * (modelOutput - ZTrain);
temp4 = temp4 / dataSize;
errorTrain = sqrt(temp4);
errorTrainArr(index,1) = errorTrain;


ZzModel = griddata(XTrain,YTrain,modelOutput,Xx,Yy);

figure,
% hSurface = surf(Xx,Yy,ZzTrain);
% set(hSurface, 'FaceColor',[1 0 0], 'FaceAlpha',0.7, 'EdgeAlpha', 0);
scatter3(XTrain,YTrain,ZTrain);
% hold on
% plot3(X,Y,Z,'o');
hold on
mSurf = surf(Xx,Yy,ZzModel);
% set(mSurf, 'FaceColor',[0 0 1], 'FaceAlpha',0.7, 'EdgeAlpha', 0);

% figure,
% plot(ZTrain,modelOutput,'*',min(ZTrain):max(ZTrain),min(ZTrain):max(ZTrain));

%%%%%%%%%%%%% test error %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for i=1:1:testDataSize
   
    for j=1:1:D
       
        temp2 = (testData(i,1:dimensionX) - centres(j,1:dimensionX));
        numerator = (temp2 / covMatrix) * temp2';
        designTest(i,j) = exp(-1 * numerator/ 2);
        temp2 = zeros;
    end
end

testOutputModel = designTest * params;
temp4 = (ZTest - testOutputModel)' * (ZTest - testOutputModel);
temp4 = temp4 / testDataSize;
testError = sqrt(temp4);
errorTestArr(index,1) = testError;
index = index+1;

% end

% errorTrainArr(:,1) = (1/max(errorTestArr)) .* errorTrainArr(:,1);
% errorTestArr(:,1) = (1/max(errorTestArr)) .* errorTestArr(:,1);

%% 

figure,
plot(start:steps:maxGaussians,(errorTrainArr),'-o',start:steps:maxGaussians,(errorTestArr),'-o');
xlabel('No of Gaussian basis funs');
ylabel('RMS Error');
legend('Training error','Validation error');
% hold on
% patch([0 0 6 6],[0 45 45 0],'red','LineStyle','none','FaceAlpha',.1);
% hold on
% patch([6 6 24 24],[0 45 45 0],'green','LineStyle','none','FaceAlpha',.1);
% hold on
% patch([24 24 100 100],[0 45 45 0],'red','LineStyle','none','FaceAlpha',.1);

%% 

[XxTest,YyTest] = meshgrid(min(XTest):0.4:max(XTest),min(YTest):0.4:max(YTest));
ZzTestModel = griddata(XTest,YTest,testOutputModel,XxTest,YyTest);
ZzTest = griddata(XTest,YTest,ZTest,XxTest,YyTest);

figure
hSurface = surf(XxTest,YyTest,ZzTestModel);
set(hSurface, 'FaceColor',[1 0 0], 'FaceAlpha',0.7, 'EdgeAlpha', 0);
scatter3(XTrain,YTrain,ZTrain);

hold on
testSurface = surf(XxTest,YyTest,ZzTest);
set(testSurface, 'FaceColor',[0 0 1], 'FaceAlpha',0.7, 'EdgeAlpha', 0);

%figure,plot(1:size(YTrain,1),YTrain,1:size(YTest,1),YTest); % to see the difference between test and validation data


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



